var myDoc = app.activeDocument;var curFrame,ab,outfile;//get the time right now for timestampvar now = new Date();//cache all the artboards, groups, textframes, and paths in the documentvar artboards = myDoc.artboards;var groups = myDoc.groupItemsvar textFs = myDoc.textFramesvar pathOs = myDoc.pathItems//Set vote totalsvar obamaTotal = 243var romneyTotal = 203//set state status// n = no result// t = too close to call// o = Obama Victory// r = Romney Victoryvar status = {        "florida":"n",        "newhampshire":"o",        "pennsylvania":"o",        "iowa":"o",        "wisconsin":"o",        "nevada":"n",        "colorado":"n",        "virginia":"n",        "ohio":"t"    }//object for properly cased and formatted state namesvar names = {        "florida":"Florida",        "newhampshire":"New Hampshire",        "pennsylvania":"Pennsylvania",        "iowa":"Iowa",        "wisconsin":"Wisconsin",        "nevada":"Nevada",        "colorado":"Colorado",        "virginia":"Virginia",        "ohio":"Ohio"    }//arra of state keysvar states = ["florida","newhampshire","pennsylvania","iowa","wisconsin","nevada","colorado","virginia","ohio"];//set the colors of the statuses //no result is grayvar nColor = new RGBColor()nColor.red = 102nColor.green = 102nColor.blue = 102//obama is bluevar oColor = new RGBColor()oColor.red = 21oColor.green = 142oColor.blue = 255//romney is redvar rColor = new RGBColor()rColor.red = 255rColor.green = 0rColor.blue = 92//too close to call is blackvar tColor = new RGBColor()tColor.red = 0tColor.green = 0tColor.blue = 0//white is whitevar white = new RGBColor()white.red = 255;white.green = 255;white.blue = 255;//setup export optionsvar exportOptions = new ExportOptionsPNG24();exportOptions.artBoardClipping = true;exportOptions.transparency = false;//helper function to change the color of textfunction colorText(txo,color) {    //loop through every character in the text object    for(var i = 0; i < txo.characters.length; i++) {        //change the color of the current character        txo.characters[i].fillColor = color;        }}//method to color the state-name pairs in the pivotal states cardfunction colorStateGroup(sg,color) {    if(sg.pathItems.length > 0) {        //set the state to the specified coloir        sg.pathItems[0].fillColor = color        }    //set the text to the specified color    colorText(sg.textFrames[0],color)    }//loop through the text framesfor( var i = 0; i <textFs.length; i++) {    curFrame = textFs[i]    //determine if the frame is an obama result, romney result or timestamp    //update contents accordingly    if((/_obama/gi).test(curFrame.name)) {        curFrame.contents = obamaTotal;     }    else if((/_romney/gi).test(curFrame.name)) {        curFrame.contents = romneyTotal        }    else if((/timestamp\d/gi).test(curFrame.name)) {        var min = now.getMinutes() +""        if(min.length == 1) {            min = "0"+min;            }        curFrame.contents = "Results as of " + (now.getHours()-12) + ":" +min + " p.m. EST"        }        }var s,n,k,winline,baground,votesF,obamaT,romneyT,stategroup;//loop through all of the pivotal statesfor( var i = 0; i <states.length; i++) {    k= states[i]; //the key name of the state    s = status[k]; //the status of the state (n, t, o, or r)    n = names[k]; //the well formatted name of the state        //get all the relevant objects by concatinating the state key with the     //systemitized object name    stategroup = groups.getByName(k+"_group");    background = pathOs.getByName(k+"_bg");    winline = textFs.getByName(k+"_winline")    votesF = textFs.getByName(k+"_votes");    obamaT = textFs.getByName(k+"_obama");    romneyT = textFs.getByName(k+"_romney");    labelobama = textFs.getByName(k +"_labelobama");    labelromney = textFs.getByName(k +"_labelromney");        //color all of the text white, just to make sure    colorText(obamaT,white);    colorText(romneyT,white);    colorText(labelobama,white);    colorText(labelromney,white);        switch(s) {        case "n": //the state has no result             winline.contents = n +" undecided"; //update the top line            background.fillColor = nColor; //change the background color            colorText(votesF,nColor); //change the state value color            colorStateGroup(stategroup,nColor); //change the state color in the pivotal states graphic        break;                case "o": //obama won the state            winline.contents = "Obama wins " +  n;            background.fillColor = oColor;            votesF.fillColor = oColor;            colorText(votesF,oColor);            colorStateGroup(stategroup,oColor);                break;                case "r": //romney won the state            winline.contents = "Romney wins " +  n;            background.fillColor = rColor;            votesF.fillColor = rColor;            colorText(votesF,rColor);            colorStateGroup(stategroup,rColor);                break;                case "t": //the state is too close to call            winline.contents = n +" is too close to call";            background.fillColor = tColor;            votesF.fillColor = tColor;            colorText(votesF,tColor);            colorStateGroup(stategroup,tColor);                        //change the vote totals and labels to red and blue instead of white            colorText(obamaT,oColor);             colorText(romneyT,rColor);            colorText(labelobama,oColor);            colorText(labelromney,rColor);        break;               }        }///save all the artboards//find the current file pathvar curLoc = (new File($.fileName)).path;//loop through all of the artboardsfor(var i=0; i< artboards.length;i++) {    ab = artboards[i];        //set the active artboard    artboards.setActiveArtboardIndex(i);        //save a copy of the artboard with a timestamp    outfile = new File(curLoc+"/output/all/"+now.getHours()+"-"+now.getMinutes()+"_"+ab.name)    myDoc.exportFile(outfile,ExportType.PNG24,exportOptions);        //overwrite the existing latest copy in the latest folder    outfile = new File(curLoc+"/output/latest/"+"latest_"+ab.name)    myDoc.exportFile(outfile,ExportType.PNG24,exportOptions);        }